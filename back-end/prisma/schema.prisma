// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(cuid())
  name         String
  email        String
  password     String
  admin        Boolean        @default(false)
  image        String?
  verified_at  DateTime?
  created_at   DateTime       @default(now())
  Notification Notification[]
  Order        Order[]
  UserToken    UserToken[]

  @@map("users")
}

model UserToken {
  id            String   @id @default(cuid())
  expires_date  DateTime
  refresh_token String
  user_id       String
  user          User     @relation(fields: [user_id], references: [id])
  created_at    DateTime @default(now())

  @@map("users_tokens")
}

model Notification {
  id      String  @id @default(cuid())
  title   String
  message String
  read    Boolean
  user    User    @relation(fields: [user_id], references: [id])
  user_id String

  created_at DateTime @default(now())

  @@map("notifications")
}

model Product {
  id         String   @id @default(cuid())
  name       String   @unique
  price      Float
  image      String
  created_at DateTime @default(now())

  category    Category    @relation(fields: [category_id], references: [id])
  category_id String
  OrderItem   OrderItem[]

  @@map("products")
}

model OrderItem {
  id         String  @id @default(cuid())
  quantity   Int
  product    Product @relation(fields: [product_id], references: [id])
  product_id String
  Order      Order[]

  @@map("order_items")
}

enum ORDER_STATUS {
  PENDING
  PAID
  CANCELED
}

model Order {
  id          String       @id @default(cuid())
  orderStatus ORDER_STATUS
  items       OrderItem    @relation(fields: [items_id], references: [id])
  items_id    String
  created_at  DateTime     @default(now())
  user        User         @relation(fields: [user_id], references: [id])
  user_id     String
  Payment     Payment[]

  @@map("orders")
}

model Payment {
  id         String   @id @default(cuid())
  order      Order    @relation(fields: [order_id], references: [id])
  order_id   String
  created_at DateTime @default(now())

  @@map("payments")
}

model Category {
  id         String    @id @default(cuid())
  name       String    @unique
  created_at DateTime  @default(now())
  Product    Product[]

  @@map("categories")
}
